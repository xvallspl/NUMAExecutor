From d45c1f672f9bca9e931ee39e7fd5960e3e7fd577 Mon Sep 17 00:00:00 2001
From: Xavier Valls <xaviervallspla@gmail.com>
Date: Sat, 30 Sep 2017 19:21:45 +0200
Subject: [PATCH] Add array_view signature to TThreadExecutor

---
 core/imt/inc/ROOT/TThreadExecutor.hxx | 66 ++++++++++++++++++++++++++++++++++-
 1 file changed, 65 insertions(+), 1 deletion(-)

diff --git a/core/imt/inc/ROOT/TThreadExecutor.hxx b/core/imt/inc/ROOT/TThreadExecutor.hxx
index 3358047..43aefe1 100644
--- a/core/imt/inc/ROOT/TThreadExecutor.hxx
+++ b/core/imt/inc/ROOT/TThreadExecutor.hxx
@@ -29,7 +29,7 @@
 #include <functional>
 #include <memory>
 #include <numeric>
-
+#include "ROOT/RArrayView.hxx" // for IsContainer
 namespace ROOT {
 
    class TThreadExecutor: public TExecutor<TThreadExecutor> {
@@ -60,6 +60,9 @@ namespace ROOT {
       template<class F, class T, class Cond = noReferenceCond<F, T>>
       auto Map(F func, std::vector<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;
 
+      template<class F, class T, class Cond = noReferenceCond<F, T>>
+      auto Map(F func, std::array_view<T> &args) -> std::vector<typename std::result_of<F(T)>::type>;
+
       // // MapReduce
       // // the late return types also check at compile-time whether redfunc is compatible with func,
       // // other than checking that func is compatible with the type of arguments.
@@ -79,6 +82,10 @@ namespace ROOT {
       auto MapReduce(F func, std::vector<T> &args, R redfunc) -> typename std::result_of<F(T)>::type;
       template<class F, class T, class R, class Cond = noReferenceCond<F, T>>
       auto MapReduce(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> typename std::result_of<F(T)>::type;
+      template<class F, class T, class R, class Cond = noReferenceCond<F, T>>
+      auto MapReduce(F func, std::array_view<T> &args, R redfunc) -> typename std::result_of<F(T)>::type;
+      template<class F, class T, class R, class Cond = noReferenceCond<F, T>>
+      auto MapReduce(F func, std::array_view<T> &args, R redfunc, unsigned nChunks) -> typename std::result_of<F(T)>::type;
 
       using TExecutor<TThreadExecutor>::Reduce;
       template<class T, class BINARYOP> auto Reduce(const std::vector<T> &objs, BINARYOP redfunc) -> decltype(redfunc(objs.front(), objs.front()));
@@ -93,6 +100,8 @@ namespace ROOT {
       auto Map(F func, std::vector<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;
       template<class F, class T, class R, class Cond = noReferenceCond<F, T>>
       auto Map(F func, std::initializer_list<T> args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;
+      template<class F, class T, class R, class Cond = noReferenceCond<F, T>>
+      auto Map(F func, std::array_view<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type>;
 
    private:
       void   ParallelFor(unsigned start, unsigned end, unsigned step, const std::function<void(unsigned int i)> &f);
@@ -235,6 +244,23 @@ namespace ROOT {
       return reslist;
    }
 
+   template<class F, class T, class Cond>
+   auto TThreadExecutor::Map(F func, std::array_view<T> &args) -> std::vector<typename std::result_of<F(T)>::type> {
+      // //check whether func is callable
+      using retType = decltype(func(args.front()));
+
+      unsigned int nToProcess = args.size();
+      std::vector<retType> reslist(nToProcess);
+
+      auto lambda = [&](const unsigned int i)
+      {
+         reslist[i] = func(args[i]);
+      };
+
+      ParallelFor(0U, nToProcess, 1, lambda);
+
+      return reslist;
+   }
    //////////////////////////////////////////////////////////////////////////
    /// Execute func in parallel, taking an element of a
    /// sequence as argument.
@@ -303,6 +329,32 @@ namespace ROOT {
       return reslist;
    }
 
+ template<class F, class T, class R, class Cond>
+ auto TThreadExecutor::Map(F func, std::array_view<T> &args, R redfunc, unsigned nChunks) -> std::vector<typename std::result_of<F(T)>::type> {
+      if (nChunks == 0)
+      {
+         return Map(func, args);
+      }
+
+      unsigned int nToProcess = args.size();
+      unsigned step = (nToProcess + nChunks - 1) / nChunks;
+      unsigned actualChunks = (nToProcess + step - 1) / step;
+
+      using retType = decltype(func(args.front()));
+      std::vector<retType> reslist(actualChunks);
+      auto lambda = [&](unsigned int i)
+      {
+         std::vector<T> partialResults(step);
+         for (unsigned j = 0; j < step && (i + j) < nToProcess; j++) {
+            partialResults[j] = func(args[i + j]);
+         }
+         reslist[i / step] = redfunc(partialResults);
+      };
+
+      ParallelFor(0U, nToProcess, step, lambda);
+
+      return reslist;
+   }
     //////////////////////////////////////////////////////////////////////////
    /// Execute func in parallel, taking an element of an
    /// std::initializer_list as an argument. Divides and groups the executions in nChunks with partial reduction.
@@ -355,6 +407,18 @@ namespace ROOT {
       return Reduce(Map(func, args, redfunc, nChunks), redfunc);
    }
 
+   template<class F, class T, class R, class Cond>
+   auto TThreadExecutor::MapReduce(F func, std::array_view<T> &args, R redfunc) -> typename std::result_of<F(T)>::type {
+      return Reduce(Map(func, args), redfunc);
+   }
+
+   template<class F, class T, class R, class Cond>
+   auto TThreadExecutor::MapReduce(F func, std::array_view<T> &args, R redfunc, unsigned nChunks) -> typename std::result_of<F(T)>::type {
+      return Reduce(Map(func, args, redfunc, nChunks), redfunc);
+   }
+
+
+
    //////////////////////////////////////////////////////////////////////////
    /// "Reduce" an std::vector into a single object in parallel by passing a
    /// binary operator as the second argument to act on pairs of elements of the std::vector.
-- 
1.8.3.1

